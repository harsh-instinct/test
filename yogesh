About Project\n\tWe have a project called Tinycommand Forms. We have added analytics in the form like question viewed, form started, etc.\n\tWe have following events:\n\tA. form_viewed\n\tB. question_viewed\n\tC. form_started\n\tD. question_answered\n\tE. form_completed\n\tDont assume any other event. We log these events in postgres database(structure is defined in later part of this doc).\n\n\nWhat we want from you\n\tWe have made a dynamic dashboard application made using react js and react-google-charts. This dashboard expects a JSON and based on that it renders the dashboard components (details are in later portion of doc). You have to take user query as input and think what information we can show on the dashboard and accordingly add things in the JSON payload.\n\n\nData source - Well explained Schema\n\tWe have a postgres database. There is a table called \"form_events\".\n\tschema is:\n\t\t1. form_id     // id of form\n\t\t2. node_id\t\t// this is question id\n\t\t3. node_type\t// this is question type eg: short_text, long_text, mcq, dropdown, etc\n\t\t4. timestamp\t// log time\n\t\t5. event_type  // this is event type eg. form_viewed, form_started, question_viewed, question_answered, form_completed\n\t\t6. browser\n\t\t7. device_type\n\t\t8. ip_address\n\t\t9. duration\t// duration will be in seconds. It will be in two events only - form_completed(to find time to complete the form) and question_answered (to find time to answer that question)\n\n\nDashoboard structure - like bootstrap, childs logic, height\n\tdashboard structure is created using the react-bootstrap grid system, in which we are using  row, column, and card. each child is one row and  each object in child is one cell of grid, which is inside card. there is height in sibling to child which gives height of row\n\nDashboard elements - well explained card types - stat, bar, pie. Value, heading\n\tA. Stat - This will be used to display singular data like \"Total Form Views\": 100.\n\t\tStructure: {\n\t\t\t\t\t\"id\": \"stat_1\",\n\t\t\t\t\t\"type\": \"stat\",\n\t\t\t\t\t\"heading\": \"Total Form Views\",\n\t\t\t\t\t\"value\": \"100\",\n\t\t\t\t\t\"col\": 4 // This is basically on the basis of bootstrap grid system. You can consider col-4\n\t\t\t\t  },\n\tB. Pie Chart - This will be used to render pie chart using react-google-charts\n\t\tStructure: {\n\t\t\t\t\t\"id\": \"pie_chart_1\",\n\t\t\t\t\t\"type\": \"pie_chart\",\n\t\t\t\t\t\"heading\": \"distribution of form submissions by browser\",\n\t\t\t\t\t\"value\": [ \n\t\t\t\t\t\t\t{ browser: 'Chrome', usage_count: '20' },\n\t\t\t\t\t\t\t{ browser: 'Safari', usage_count: '30' } \n\t\t\t\t\t\t  ],\n\t\t\t\t\t\"col\": 6,\n\t\t\t\t  },\n\tC. Bar Chart - This will be used to render bar chart using react-google-charts\n\t\tStructure: {\n\t\t\t\t\t\"id\": \"bar_chart_1\",\n\t\t\t\t\t\"type\": \"bar_chart\",\n\t\t\t\t\t\"heading\": \"Average time taken to answer different types of questions\",\n\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t    { node_type: 'WELCOME', avg_time_to_answer: '1922.000 ms' },\n\t\t\t\t\t\t    { node_type: 'SHORT_TEXT', avg_time_to_answer: '3305.000 ms' },\n\t\t\t\t\t\t    { node_type: 'LONG_TEXT', avg_time_to_answer: '1839.000 ms' },\n\t\t\t\t\t\t    { node_type: 'MCQ', avg_time_to_answer: '2777.500 ms' }\n\t\t\t\t\t\t  ],\n\t\t\t\t\t\"col\": 6,\n\t\t\t\t  },\n\n\n5. Expected output example - Value will be in query format and we will execute query on our backend server to get actual data from db and we will replace it in this json\n\t[\n\t  {\n\t    \"id\": \"row_1\",\n\t    \"childs\": [\n\t      {\n\t        \"id\": \"stat_1\",\n\t        \"type\": \"stat\",\n\t        \"heading\": \"Average Time to Fill Form\",\n\t        \"value\": \"SELECT CONCAT(ROUND(AVG(CAST(duration AS numeric)), 3), ' ms') AS avg_completion_time FROM logsschema.logstable WHERE event_type = 'form_completed';\",\n\t        \"col\": 4,\n\t      },\n\t      {\n\t        \"id\": \"stat_2\",\n\t        \"type\": \"stat\",\n\t        \"heading\": \"Form Views\",\n\t        \"value\": \"SELECT COUNT(DISTINCT ip_address) AS unique_viewers FROM logsschema.logstable WHERE event_type = 'form_viewed';\",\n\t        \"col\": 4,\n\t      },\n\t      {\n\t        \"id\": \"stat_2\",\n\t        \"type\": \"stat\",\n\t        \"heading\": \"Total Forms Completed\",\n\t        \"value\": \"SELECT COUNT(*) AS total_forms_completed FROM logsschema.logstable WHERE event_type = 'form_completed';\",\n\t        \"col\": 4,\n\t      }\n\t    ],\n\t    \"height\": 200\n\t  },\n\t  {\n\t    \"id\": \"row_2\",\n\t    \"childs\": [\n\t      {\n\t        \"id\": \"pie_chart_1\",\n\t        \"type\": \"pie_chart\",\n\t        \"value\": \"SELECT device_type, COUNT(DISTINCT form_id) AS forms_completed FROM logsschema.logstable WHERE event_type = 'form_completed' GROUP BY device_type;\",\n\t        \"col\": 6\n\t      },\n\t      {\n\t        \"id\": \"pie_chart_2\",\n\t        \"type\": \"pie_chart\",\n\t        \"value\": \"SELECT browser, COUNT(*) AS usage_count FROM logsschema.logstable GROUP BY browser;\",\n\t        \"col\": 6,\n\t      }\n\t    ],\n\t    \"height\": 300\n\t  },\n\t  {\n\t    \"id\": \"row_3\",\n\t    \"childs\": [\n\t      {\n\t        \"id\": \"bar_chart_1\",\n\t        \"type\": \"bar_chart\",\n\t        \"value\": \"SELECT node_type, CONCAT(ROUND(AVG(CAST(duration AS numeric)),3),' ms') AS avg_time_to_answer FROM logsschema.logstable WHERE event_type = 'question_answered' GROUP BY node_type;\",\n\t        \"col\": 6,\n\t      },\n\t      {\n\t        \"id\": \"pie_chart_3\",\n\t        \"type\": \"pie_chart\",\n\t        \"value\": \"SELECT node_type, COUNT(*) AS question_answered_count FROM logsschema.logstable WHERE event_type = 'question_answered' GROUP BY node_type;\",\n\t        \"col\": 6,\n\t      }\n\t    ],\n\t    \"height\": 300\n\t  }\n\t]
